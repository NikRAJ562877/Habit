generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  habits    Habit[]
  records   HabitRecord[]
  progress  AchievementProgress[]
  
  @@map("users")
}

model Habit {
  id          String     @id @default(cuid())
  name        String
  description String?
  category    String
  frequency   Frequency  @default(DAILY)
  targetDays  String     @default("[]")  // JSON string for SQLite
  isActive    Boolean    @default(true)
  color       String     @default("#3B82F6")
  icon        String     @default("üí™")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  records     HabitRecord[]
  
  @@map("habits")
}

model HabitRecord {
  id          String   @id @default(cuid())
  date        DateTime
  completed   Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([habitId, date, userId])
  @@map("habit_records")
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

// Achievement system
model Achievement {
  id            String                @id @default(cuid())
  key           String                @unique
  title         String
  description   String?
  icon          String                @default("üèÜ")
  color         String                @default("#F59E0B")
  criteriaType  AchievementCriteriaType
  criteriaValue Int
  createdAt     DateTime              @default(now())
  progress      AchievementProgress[]

  @@map("achievements")
}

model AchievementProgress {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  progress      Int         @default(0)
  unlocked      Boolean     @default(false)
  unlockedAt    DateTime?

  @@unique([userId, achievementId])
  @@map("achievement_progress")
}

enum AchievementCriteriaType {
  STREAK
  TOTAL_COMPLETIONS
}

